name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main

env:
  AWS_PARTITION: aws-cn
  ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-aws-deployer
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_URL: ${{ secrets.ECR_URL }}
  REGION: ${{ secrets.REGION }}

jobs:
  IAC:
    name: Infrastructure as Code
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup AWS Credentials
        run: |
          echo "Setting up AWS credentials..."
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role-with-web-identity --role-arn $ROLE_ARN --role-session-name "GitHubRunner-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --region $REGION --output text))

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init, Plan, Apply
        run: |
          rm -rf ./IAC/root/.terraform
          terraform -chdir=./IAC/root init
          terraform -chdir=./IAC/root plan -out="planfile" -var="env_var=[{\"name\":\"SNOWFLAKE_ACCOUNT\",\"value\":\"$SNOWFLAKE_ACCOUNT\"},{\"name\":\"SNOWFLAKE_USER\",\"value\":\"$SNOWFLAKE_USER\"},{\"name\":\"SNOWFLAKE_PASSWORD\",\"value\":\"$SNOWFLAKE_PASSWORD\"}]"
          terraform -chdir=./IAC/root apply -input=false --auto-approve "planfile"
          terraform -chdir=./IAC/root output -json > terraform_outputs.json
          cat terraform_outputs.json

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs
          path: terraform_outputs.json

  dag-logic:
    name: DAG Logic
    runs-on: ubuntu-latest
    needs: IAC
    if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs

      - name: Run DAG Update Script
        run: |
          chmod +x update_dag.sh
          ./update_dag.sh
          cat dbt_ecs_task.py
          aws s3 ls s3://dbt-bucket/dags/

  build-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: dag-logic
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Docker
        run: |
          docker info

      - name: Build Docker Image
        run: |
          docker build -t $DOCKER_IMAGE_NAME -f ./project/Dockerfile ./project
          echo "Logging into AWS ECR..."
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.cn-northwest-1.amazonaws.com.cn
          docker tag $DOCKER_IMAGE_NAME:latest $ECR_URL/$DOCKER_IMAGE_NAME:latest
          docker push $ECR_URL/$DOCKER_IMAGE_NAME:latest

  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup AWS Credentials
        run: |
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $(aws sts assume-role-with-web-identity --role-arn $ROLE_ARN --role-session-name "GitHubRunner-${{ github.run_id }}" --web-identity-token ${{ secrets.GITHUB_OIDC_TOKEN }} --duration-seconds 3600 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --region $REGION --output text))

      - name: Clean Up S3 and ECR
        run: |
          aws s3api list-object-versions --bucket dbt-bucket \
            --query "Versions[].[Key,VersionId]" --output text | while read key version_id; do
              aws s3api delete-object --bucket dbt-bucket \
                --key "$key" --version-id "$version_id"
          done > /dev/null 2>&1 || true
          aws ecr batch-delete-image --repository-name dbt-repo1 --image-ids imageTag=latest > /dev/null 2>&1 || true

      - name: Destroy Terraform Infrastructure
        run: |
          terraform -chdir=./IAC/root init
          terraform -chdir=./IAC/root plan -out="planfile" -var="env_var=[{\"name\":\"SNOWFLAKE_ACCOUNT\",\"value\":\"$SNOWFLAKE_ACCOUNT\"},{\"name\":\"SNOWFLAKE_USER\",\"value\":\"$SNOWFLAKE_USER\"},{\"name\":\"SNOWFLAKE_PASSWORD\",\"value\":\"$SNOWFLAKE_PASSWORD\"}]"
          terraform -chdir=./IAC/root destroy -var="env_var=[{\"name\":\"SNOWFLAKE_ACCOUNT\",\"value\":\"$SNOWFLAKE_ACCOUNT\"},{\"name\":\"SNOWFLAKE_USER\",\"value\":\"$SNOWFLAKE_USER\"},{\"name\":\"SNOWFLAKE_PASSWORD\",\"value\":\"$SNOWFLAKE_PASSWORD\"}]" --auto-approve

  default:
    name: Default Job
    runs-on: ubuntu-latest
    steps:
      - name: No Changes Detected
        run: echo "No significant changes detected"
